<?php

namespace Voronyuk\TelegramNotifier\Services\Notifications;

use Voronyuk\TelegramNotifier\Services\TelegramNotifier;

/**
 * –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Å–∏–ª–∫–∏
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * $notifier = new ParcelNotifier();
 * $notifier->send('–ü–æ—Å–∏–ª–∫—É –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ');
 */
class ParcelNotifier extends TelegramNotifier
{
    protected function getDefaultChatId(): string
    {
        return config('telegram-notifier.chats.parcels')
            ?? config('telegram-notifier.parcels_chat_id')
            ?? parent::getDefaultChatId();
    }

    /**
     * –®–≤–∏–¥–∫–∏–π –º–µ—Ç–æ–¥: –ü–æ—Å–∏–ª–∫—É –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ
     */
    public function scanned(object $parcel): void
    {
        $message = $this->formatScanMessage($parcel);
        $this->send($message);
    }

    /**
     * –®–≤–∏–¥–∫–∏–π –º–µ—Ç–æ–¥: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ
     */
    public function scanError(object $parcel, string $error): void
    {
        $message = "‚ö†Ô∏è <b>–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è</b>\n\n";
        $message .= "–ü–æ—Å–∏–ª–∫–∞ ID: <code>{$parcel->id}</code>\n";
        $message .= "–®—Ç—Ä–∏—Ö–∫–æ–¥: <code>{$parcel->barcode}</code>\n";
        $message .= "–ü–æ–º–∏–ª–∫–∞: <i>{$error}</i>\n";
        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * –®–≤–∏–¥–∫–∏–π –º–µ—Ç–æ–¥: –†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –≤–∞–≥–∏
     */
    public function weightDivergence(object $parcel, float $expectedWeight, float $actualWeight): void
    {
        $diff = abs($actualWeight - $expectedWeight);
        $percent = $expectedWeight > 0 ? round(($diff / $expectedWeight) * 100, 2) : 0;

        $message = "‚öñÔ∏è <b>–†–æ–∑–±—ñ–∂–Ω—ñ—Å—Ç—å –≤–∞–≥–∏!</b>\n\n";
        $message .= "–ü–æ—Å–∏–ª–∫–∞: <code>{$parcel->barcode}</code>\n";
        $message .= "–û—á—ñ–∫—É–≤–∞–Ω–∞ –≤–∞–≥–∞: <b>{$expectedWeight} –∫–≥</b>\n";
        $message .= "–§–∞–∫—Ç–∏—á–Ω–∞ –≤–∞–≥–∞: <b>{$actualWeight} –∫–≥</b>\n";
        $message .= "–†—ñ–∑–Ω–∏—Ü—è: <b>{$diff} –∫–≥ ({$percent}%)</b>\n";
        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞–Ω
     */
    protected function formatScanMessage(object $parcel): string
    {
        $message = "üì¶ <b>–ü–æ—Å–∏–ª–∫—É –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ</b>\n\n";
        $message .= "ID: <code>{$parcel->id}</code>\n";
        $message .= "–®—Ç—Ä–∏—Ö–∫–æ–¥: <code>{$parcel->barcode}</code>\n";

        if (isset($parcel->weight)) {
            $message .= "–í–∞–≥–∞: <b>{$parcel->weight} –∫–≥</b>\n";
        }

        if (isset($parcel->length, $parcel->width, $parcel->height)) {
            $message .= "–†–æ–∑–º—ñ—Ä–∏: {$parcel->length} √ó {$parcel->width} √ó {$parcel->height} —Å–º\n";
        }

        if (isset($parcel->volume)) {
            $message .= "–û–±'—î–º: {$parcel->volume} –º¬≥\n";
        }

        $message .= "\n–ß–∞—Å —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è: " . now()->format('d.m.Y H:i:s');

        return $message;
    }
}