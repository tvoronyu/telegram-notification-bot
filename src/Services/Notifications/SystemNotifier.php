<?php

namespace Voronyuk\TelegramNotifier\Services\Notifications;

use Voronyuk\TelegramNotifier\Services\TelegramNotifier;

/**
 * –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * $notifier = new SystemNotifier();
 * $notifier->info('–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
 */
class SystemNotifier extends TelegramNotifier
{
    protected function getDefaultChatId(): string
    {
        return config('telegram-notifier.chats.system')
            ?? config('telegram-notifier.system_chat_id')
            ?? parent::getDefaultChatId();
    }

    /**
     * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    public function info(string $message): void
    {
        $msg = "‚ÑπÔ∏è <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</b>\n\n";
        $msg .= $message;
        $msg .= "\n\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($msg);
    }

    /**
     * –£—Å–ø—ñ—à–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è
     */
    public function success(string $message): void
    {
        $msg = "‚úÖ <b>–£—Å–ø—ñ—à–Ω–æ</b>\n\n";
        $msg .= $message;
        $msg .= "\n\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($msg);
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
     */
    public function startup(): void
    {
        $message = "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n";
        $message .= "–°–µ—Ä–≤–µ—Ä: " . gethostname() . "\n";
        $message .= "–°–µ—Ä–µ–¥–æ–≤–∏—â–µ: " . config('app.env') . "\n";
        $message .= "–í–µ—Ä—Å—ñ—è PHP: " . PHP_VERSION . "\n";
        $message .= "–í–µ—Ä—Å—ñ—è Laravel: " . app()->version() . "\n";
        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->withoutQueue()->send($message);
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞
     */
    public function shutdown(?string $reason = null): void
    {
        $message = "üõë <b>–°–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞</b>\n\n";

        if ($reason) {
            $message .= "–ü—Ä–∏—á–∏–Ω–∞: <i>{$reason}</i>\n\n";
        }

        $message .= "–°–µ—Ä–≤–µ—Ä: " . gethostname() . "\n";
        $message .= "–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->withoutQueue()->send($message);
    }

    /**
     * –ü–ª–∞–Ω–æ–≤–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
     */
    public function maintenance(string $startTime, string $duration): void
    {
        $message = "üîß <b>–ü–ª–∞–Ω–æ–≤–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è</b>\n\n";
        $message .= "–ü–æ—á–∞—Ç–æ–∫: <b>{$startTime}</b>\n";
        $message .= "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <i>{$duration}</i>\n\n";
        $message .= "–ü—ñ–¥ —á–∞—Å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n";
        $message .= "–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!";

        $this->send($message);
    }

    /**
     * Backup –∑–∞–≤–µ—Ä—à–µ–Ω–æ
     */
    public function backupCompleted(string $filename, string $size): void
    {
        $message = "üíæ <b>Backup –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n";
        $message .= "–§–∞–π–ª: <code>{$filename}</code>\n";
        $message .= "–†–æ–∑–º—ñ—Ä: <b>{$size}</b>\n";
        $message .= "–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * Deployment –∑–∞–≤–µ—Ä—à–µ–Ω–æ
     */
    public function deploymentCompleted(string $version, ?string $branch = null): void
    {
        $message = "üöÄ <b>Deployment –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n";
        $message .= "–í–µ—Ä—Å—ñ—è: <code>{$version}</code>\n";

        if ($branch) {
            $message .= "–ì—ñ–ª–∫–∞: <code>{$branch}</code>\n";
        }

        $message .= "–°–µ—Ä–≤–µ—Ä: " . gethostname() . "\n";
        $message .= "–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * –í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    public function highLoad(array $metrics): void
    {
        $message = "‚ö†Ô∏è <b>–í–∏—Å–æ–∫–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è!</b>\n\n";

        if (isset($metrics['cpu'])) {
            $message .= "CPU: <b>{$metrics['cpu']}%</b>\n";
        }

        if (isset($metrics['memory'])) {
            $message .= "–ü–∞–º'—è—Ç—å: <b>{$metrics['memory']}%</b>\n";
        }

        if (isset($metrics['disk'])) {
            $message .= "–î–∏—Å–∫: <b>{$metrics['disk']}%</b>\n";
        }

        if (isset($metrics['queue'])) {
            $message .= "–ß–µ—Ä–≥–∞: <b>{$metrics['queue']} –∑–∞–≤–¥–∞–Ω—å</b>\n";
        }

        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->withoutQueue()->send($message);
    }
}