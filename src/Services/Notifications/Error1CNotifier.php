<?php

namespace Voronyuk\TelegramNotifier\Services\Notifications;

use Voronyuk\TelegramNotifier\Services\TelegramNotifier;

/**
 * –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * $notifier = new ErrorNotifier();
 * $notifier->send('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞!');
 * // –∞–±–æ
 * $notifier->exception($exception);
 */
class Error1CNotifier extends TelegramNotifier
{
    public function __construct()
    {
        parent::__construct();
        // –ü–æ–º–∏–ª–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–≥–∞–π–Ω–æ
        $this->withoutQueue();
    }

    protected function getDefaultChatId(): string
    {
        return config('services.telegram_bot.errors_chat_id', parent::getDefaultChatId());
    }

    protected function getDefaultBotId(): int
    {
        return config('services.telegram_bot.errors_bot_id', parent::getDefaultBotId());
    }

    /**
     * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ Exception
     */
    public function exception(\Throwable $exception, ?string $context = null): void
    {
        $message = "üö® <b>–ü–æ–º–∏–ª–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ!</b>\n\n";

        if ($context) {
            $message .= "–ö–æ–Ω—Ç–µ–∫—Å—Ç: <i>{$context}</i>\n\n";
        }

        $message .= "–¢–∏–ø: <code>" . get_class($exception) . "</code>\n";
        $message .= "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: <code>{$exception->getMessage()}</code>\n";
        $message .= "–§–∞–π–ª: <code>{$exception->getFile()}:{$exception->getLine()}</code>\n";
        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
     */
    public function critical(string $message, ?array $context = null): void
    {
        $msg = "üî¥ <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê! (1C)</b>\n\n";
        $msg .= $message;

        if ($context) {
            $msg .= "\n\n<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>\n<pre>" . json_encode($context, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre>";
        }

        $msg .= "\n\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($msg);
    }

    /**
     * –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
     */
    public function warning(string $message): void
    {
        $msg = "‚ö†Ô∏è <b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è</b>\n\n";
        $msg .= $message;
        $msg .= "\n\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($msg);
    }

    /**
     * –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
     */
    public function validationError(string $field, string $error, ?array $data = null): void
    {
        $message = "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó</b>\n\n";
        $message .= "–ü–æ–ª–µ: <code>{$field}</code>\n";
        $message .= "–ü–æ–º–∏–ª–∫–∞: <i>{$error}</i>\n";

        if ($data) {
            $message .= "\n–î–∞–Ω—ñ:\n<pre>" . json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) . "</pre>";
        }

        $message .= "\n\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }
}
