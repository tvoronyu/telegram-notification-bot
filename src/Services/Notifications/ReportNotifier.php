<?php

namespace Voronyuk\TelegramNotifier\Services\Notifications;

use Voronyuk\TelegramNotifier\Services\TelegramNotifier;

/**
 * –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 * $notifier = new ReportNotifier();
 * $notifier->daily($stats);
 */
class ReportNotifier extends TelegramNotifier
{
    protected function getDefaultChatId(): string
    {
        return config('services.telegram_bot.reports_chat_id', parent::getDefaultChatId());
    }

    /**
     * –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
     */
    public function daily(array $stats): void
    {
        $message = "üìä <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç</b>\n";
        $message .= "–î–∞—Ç–∞: " . now()->format('d.m.Y') . "\n\n";

        if (isset($stats['parcels_scanned'])) {
            $message .= "üì¶ –ü–æ—Å–∏–ª–æ–∫ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ: <b>{$stats['parcels_scanned']}</b>\n";
        }

        if (isset($stats['parcels_processed'])) {
            $message .= "‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: <b>{$stats['parcels_processed']}</b>\n";
        }

        if (isset($stats['parcels_pending'])) {
            $message .= "‚è≥ –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ: <b>{$stats['parcels_pending']}</b>\n";
        }

        if (isset($stats['errors'])) {
            $message .= "‚ùå –ü–æ–º–∏–ª–æ–∫: <b>{$stats['errors']}</b>\n";
        }

        if (isset($stats['active_users'])) {
            $message .= "\nüë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{$stats['active_users']}</b>\n";
        }

        if (isset($stats['avg_processing_time'])) {
            $message .= "üïê –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏: <i>{$stats['avg_processing_time']} —Ö–≤</i>";
        }

        $this->send($message);
    }

    /**
     * –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç
     */
    public function weekly(array $stats): void
    {
        $message = "üìà <b>–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç</b>\n";
        $message .= "–ü–µ—Ä—ñ–æ–¥: " . now()->subWeek()->format('d.m') . " - " . now()->format('d.m.Y') . "\n\n";

        foreach ($stats as $key => $value) {
            $label = $this->formatStatLabel($key);
            $message .= "{$label}: <b>{$value}</b>\n";
        }

        $this->send($message);
    }

    /**
     * –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç
     */
    public function monthly(array $stats): void
    {
        $message = "üìä <b>–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç</b>\n";
        $message .= "–ú—ñ—Å—è—Ü—å: " . now()->format('F Y') . "\n\n";

        foreach ($stats as $key => $value) {
            $label = $this->formatStatLabel($key);
            $message .= "{$label}: <b>{$value}</b>\n";
        }

        $this->send($message);
    }

    /**
     * –ö–∞—Å—Ç–æ–º–Ω–∏–π –∑–≤—ñ—Ç
     */
    public function custom(string $title, array $data): void
    {
        $message = "üìã <b>{$title}</b>\n\n";

        foreach ($data as $key => $value) {
            if (is_array($value)) {
                $message .= "<b>{$key}:</b>\n";
                foreach ($value as $subKey => $subValue) {
                    $message .= "  ‚Ä¢ {$subKey}: {$subValue}\n";
                }
            } else {
                $message .= "{$key}: <b>{$value}</b>\n";
            }
        }

        $message .= "\n–ß–∞—Å: " . now()->format('d.m.Y H:i:s');

        $this->send($message);
    }

    /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    protected function formatStatLabel(string $key): string
    {
        $labels = [
            'parcels_scanned' => 'üì¶ –ü–æ—Å–∏–ª–æ–∫ –≤—ñ–¥—Å–∫–∞–Ω–æ–≤–∞–Ω–æ',
            'parcels_processed' => '‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ',
            'parcels_pending' => '‚è≥ –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ',
            'errors' => '‚ùå –ü–æ–º–∏–ª–æ–∫',
            'active_users' => 'üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
            'avg_processing_time' => 'üïê –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–±—Ä–æ–±–∫–∏',
            'total_weight' => '‚öñÔ∏è –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞–≥–∞',
            'total_volume' => 'üìè –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±\'—î–º',
        ];

        return $labels[$key] ?? ucfirst(str_replace('_', ' ', $key));
    }
}